<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>&#39;java虚拟机笔记（三）&#39;</title>
      <link href="/newblog/2018/08/11/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/newblog/2018/08/11/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h1><h3 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h3><p>​    类从被加载到虚拟机内存开始到卸载内存为止，整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong></p><p>​    类必须立即初始化情况：</p><ol><li>遇到 new、getstatic、putstatic和invokestatic这4条字节码指令时。</li><li>使用java.lang.reflect包方法对类进行反射调用时候。</li><li>当初始化一个类的时候，欺父类没有被初始化要先初始化其父类。</li><li>虚拟机启动时用户需要指定要执行的主类（包括main方法），虚拟机会先初始化这个主类。</li><li>如果一个java.lang.reflect.MethodHandle实例最后的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有初始化，则先触发其初始化。</li></ol><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><h6 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h6><ol><li>通过一个类的全限定名获取此类的二进制字节流。</li><li>将这个字节流所代表的的静态存储结构转换成方法区的运行时数据结构。</li><li>在内存生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问接口。</li></ol><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><p>​    是连接阶段的第一步，这个阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并不会危害虚拟机的自身安全。</p><ul><li><p>文件格式验证</p><p>第一阶段验证字节流是否符合Class文件格式规范，并能被当前版本虚拟机处理。</p></li><li><p>云数据验证</p><p>第二阶段对字节码描述的信息进行语义分析，确保描述信息符合Java语言要求规范。</p></li><li><p>字节码验证</p><p>第三阶段对类的方法体进行校验分析，保证被校验的方法在运行时不会出现危害虚拟机的安全事件。</p></li><li><p>符号引用验证</p><p>对类自身以外（常量池中的各种符号引用）的信息进行匹配校验。</p></li></ul><h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><p>​    正式为变量分配内存并设置初始值的阶段，这些变量使用的内存将在方法区中分配。仅包括类变量（被static修饰）不包括实例变量。赋初值是指数据类型的零值。</p><h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6><p>​    将常量池中的符号引用替换为直接引用。</p><ul><li>符号引用：以一组符号来描述所引用的目标，符号可以是任何形式的字面量。</li><li>直接引用：可以直接指向目标的指针、相对偏移量或能间接的定位到目标的句柄。</li></ul><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p>执行类中定义的Java程序代码，初始化阶段是执行类构造器（\<clinit>()）方法的过程。</clinit></p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>启动类加载器、扩展类加载器、应用程序类加载器。</p><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p><img src="https://raw.githubusercontent.com/lgsdaredevil/newblog/resource-newblog/source/favicons/article/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.jpg" alt="双亲委派模型"></p><p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里的类加载器的父子关系一般是组合关系来复用父加载器的代码。</p><p>​    工作过程：如果一个类加载器收到类加载请求，首先会把这个请求为派给父类加载器去完成，每一层的类加载器都是这样的，因此所有请求都传给顶层的启动类加载器，只有当父类加载器反馈无法完成加载请求，子类才会尝试自己加载。</p>]]></content>
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java虚拟机笔记（二）</title>
      <link href="/newblog/2018/08/04/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/newblog/2018/08/04/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h1><h3 id="一、引用计数算法"><a href="#一、引用计数算法" class="headerlink" title="一、引用计数算法"></a>一、引用计数算法</h3><p>​    给对象中添加一个引用计数器，每当有一个地方引用他时就给计数器值加一；当引用失效时，计数器值就减一；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>​    缺点：很难解决对象之间互相循环引用的问题。</p><h3 id="二、可达性分析算法"><a href="#二、可达性分析算法" class="headerlink" title="二、可达性分析算法"></a>二、可达性分析算法</h3><p>​    以“GC Root”对象为起始点，从此节点向下搜索，搜索所走的路径成为引用链，当一个对象和GC Root之间没有任何引用链的时候，则此对象为不可用对象。</p><p><img src="https://raw.githubusercontent.com/lgsdaredevil/newblog/resource-newblog/source/favicons/article/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E5%9B%BE%E7%89%87.png" alt="可达性分析算法判断对象是否可以回收"></p><p>如上图所示，Object1到Object4与GC Root之间存在引用链，所以Object1到Object4的对象是可达对象，而Object5和Object6没有雨GC Root相关的引用链，所以Object5和Object6是不可达对象，是可以回收的对象。</p><p>​    Java中可以被称为GC Root的对象有以下几种：</p><ul><li><p>虚拟机栈中引用的对象</p></li><li><p>方法区中类静态属性引用的对象</p></li><li><p>方法区中常量引用的对象</p></li><li><p>本地方法栈中JNI（Native方法）引用的对象</p></li></ul><h3 id="三、四种引用类型"><a href="#三、四种引用类型" class="headerlink" title="三、四种引用类型"></a>三、四种引用类型</h3><ul><li><p>强引用：类似于new一个对象的引用，只要强引用存在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li><p>软引用：描述的是一些还有用但并非必须的对象，对于软引用关联的对象，在系统将要发生内存溢出之前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存就会抛出内存溢出异常。</p></li><li><p>弱引用：描述非必须对象，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收只被弱引用关联的对象。</p></li><li><p>虚引用：一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是当这个对象被收集器收集时会收到一个系统通知。</p></li></ul><p>如果一个对象在可达性分析时没后没有与GC Root相连接的引用链，它将会第一次标记并筛选，筛选条件是该对象是否有必要执行finalize()方法，如果有必要执行finalize()方法，对象只要重新与引用链上的任何一个对象建立关联即可，拿在第二次标记时将他移除“即将回收”集合。任何对象的finalize()方法只会被调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行。</p><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h3 id="一、标记—清除算法"><a href="#一、标记—清除算法" class="headerlink" title="一、标记—清除算法"></a>一、标记—清除算法</h3><p>​    首先标记出所有要回收的对象，在标记完成后统一回收被标记的对象。</p><p>​    缺点：1、效率问题，标记和清除两个过程的效率都不高。<br>           2、空间问题，标记清除会产生大量不连续的内存碎片，空间碎片太多会导致以后程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得进行另一次垃圾收集动作。</p><h3 id="二、复制算法"><a href="#二、复制算法" class="headerlink" title="二、复制算法"></a>二、复制算法</h3><p>​    将内存安容量分为大小相等的两块，每次只使用其中一块，当着一块内存用完后，将存活的对象复制到另一块上面，再把已使用的内存清理掉。</p><p>​    一般虚拟机是将内存分为一块较大的Eden空间和两块较小的Survivor空间。每次使用？Eden和其中一块Survivor，回收时，将Eden和Survivor还存后的对象复制到Survivor空间，再清理掉刚才用到的Survivor和Eden空间。当Survivor内存不足时会用到其他内存（老年代）进行分配担保。</p><p>​    缺点：在对象存活率较高时就要进行较多的复制操作，效率会变低，老年代一般不能直接选用这种做法。</p><h3 id="三、标记—整理算法"><a href="#三、标记—整理算法" class="headerlink" title="三、标记—整理算法"></a>三、标记—整理算法</h3><p>​    标记过程与标记—清除算法相同，然后让所有存活的对象都像一端移动，然后直接清理掉端边界以外的内存。适用于老年代整理。</p><p><img src="https://raw.githubusercontent.com/lgsdaredevil/newblog/resource-newblog/source/favicons/article/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95.jpg" alt="三种垃圾收集算法图片"></p><h3 id="四、分代收集算法"><a href="#四、分代收集算法" class="headerlink" title="四、分代收集算法"></a>四、分代收集算法</h3><p>​    一般根据对象存活周期将对象划分为几块。Java堆分为新生代和老年代。新生代一般采用复制算法，而老年代对象存活较高，没有额外空间对它进行分配担保，就必须使用标记—清除或标记—整理算法。</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><h3 id="一、Serial收集器"><a href="#一、Serial收集器" class="headerlink" title="一、Serial收集器"></a>一、Serial收集器</h3><p>​    是虚拟机在client模式下默认的新生代收集器，是单线程收集器，必须停掉其他所有工作线程，知道他收集结束。</p><h3 id="二、ParNew收集器"><a href="#二、ParNew收集器" class="headerlink" title="二、ParNew收集器"></a>二、ParNew收集器</h3><p>​    时Serial收集器的多线程版本。是许多运行在server模式下的虚拟机的首选的新生代收集器。除了Serial收集器外，只有它能与CMS收集器配合工作。</p><h3 id="三、Parallel-Scavenge收集器"><a href="#三、Parallel-Scavenge收集器" class="headerlink" title="三、Parallel Scavenge收集器"></a>三、Parallel Scavenge收集器</h3><p>​    并行多线程的新生代收集器。CMS等收集器的特点是尽可能缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目的是达到一个可控制吞吐量。吞吐量是指CPU用于运行用户代码的时间与CPU总消耗的时间的比值</p><h3 id="四、Serial-Old收集器"><a href="#四、Serial-Old收集器" class="headerlink" title="四、Serial Old收集器"></a>四、Serial Old收集器</h3><p>​    是Serial收集器的老年代版本，单线程收集器。主要是给client模式下的虚拟机使用。在server模式下：一是可以与Parallel Scavenge收集器配合使用。另一方面是作为CMS收集器的后备方案。</p><h3 id="五、Parallel-Old收集器"><a href="#五、Parallel-Old收集器" class="headerlink" title="五、Parallel Old收集器"></a>五、Parallel Old收集器</h3><p>​    是Parallel Scavenge收集器的老年代版本，使用多线程和标记—整理算法。</p><h3 id="六、CMS收集器"><a href="#六、CMS收集器" class="headerlink" title="六、CMS收集器"></a>六、CMS收集器</h3><p>​    是一种以获取最短回收时间为目标的收集器。基于标记—清除算法实现。运作过程：</p><ol><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ol><p>其中初始标记和重新标记需要“stop the world”，并发标记和并发清除是和用户线程一起进行的。</p><p>缺点：1、对CPU资源敏感，因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</p><p>​       2、收集器无法处理浮动垃圾。</p><p>​       3.采用标记—清除算法会产生大量空间碎片。</p><h3 id="七、G1收集器"><a href="#七、G1收集器" class="headerlink" title="七、G1收集器"></a>七、G1收集器</h3><p>​    面向服务端应用的垃圾收集器。优点如下：</p><ul><li><p>并行并发</p></li><li><p>分代收集</p></li><li><p>空间整合</p></li><li><p>可预测停顿</p></li></ul><p>它将整个Java堆分为多个大小相等的独立区域，保留新生代和老年代概念，但他们不是物理隔离，都是一部分Region的集合。G1跟踪各个Region里面的垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的手机时间，优先回收价值大的Region。</p><p>G1的操作步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><h3 id="一、对象优先在Eden分配"><a href="#一、对象优先在Eden分配" class="headerlink" title="一、对象优先在Eden分配"></a>一、对象优先在Eden分配</h3><h3 id="二、大对象直接进入老年代"><a href="#二、大对象直接进入老年代" class="headerlink" title="二、大对象直接进入老年代"></a>二、大对象直接进入老年代</h3><p>​    需要大量连续的内存空间的Java对象，最典型就是很长的字符串以及数组。</p><h3 id="三、长期存活的对象进入老年代"><a href="#三、长期存活的对象进入老年代" class="headerlink" title="三、长期存活的对象进入老年代"></a>三、长期存活的对象进入老年代</h3><p>​    虚拟机给每一个对象定义年龄计数器，在Eden代出生并经过一次Minor GC仍存后，并能被Survivor接收，被移到Survivor空间中，年龄加一。在Survivor中每熬过一次GC，年龄就加一。当年龄到一定长度后就进入老年代。</p><h3 id="四、动态对象年龄判断"><a href="#四、动态对象年龄判断" class="headerlink" title="四、动态对象年龄判断"></a>四、动态对象年龄判断</h3><p>​    如果在Survivor中的相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于等于改年龄的对象就会进入老年代。</p><h3 id="五、空间分配担保"><a href="#五、空间分配担保" class="headerlink" title="五、空间分配担保"></a>五、空间分配担保</h3><p>​    在Minor GC前虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果条件成立，那么Minor GC可以确保安全。否则虚拟机会查看HandelPromotionFailure设置的值是否允许担保失败，如果是，则在检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，尝试进行一次Minor GC。否则进行一次Full GC</p>]]></content>
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java虚拟机笔记（一）</title>
      <link href="/newblog/2018/07/28/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/newblog/2018/07/28/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="JDK和JRE区别"><a href="#JDK和JRE区别" class="headerlink" title="JDK和JRE区别"></a>JDK和JRE区别</h3><p>​    1、一般把Java程序设计语言，java虚拟机，java API类库这三部分统称为JDK（Java Development Kit），JDK是用于支持Java程序开发的最小环境。</p><p>​    2、Java API类库中Java SE API子集和Java虚拟机这两部分统称为JRE（Java Runtime Environment），JRE是支持Java程序运行的标准环境。<br><img src="https://raw.githubusercontent.com/lgsdaredevil/newblog/resource-newblog/source/favicons/article/java%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%86%85%E5%AE%B9.png" alt="java技术体系所包含的内容"></p><h2 id="Java虚拟机内存区域"><a href="#Java虚拟机内存区域" class="headerlink" title="Java虚拟机内存区域"></a>Java虚拟机内存区域</h2><h4 id="一、程序计数器"><a href="#一、程序计数器" class="headerlink" title="一、程序计数器"></a>一、程序计数器</h4><p>​    可以看做当前线程所执行的字节码的行号指示器。为线程私有的内存。是在Java虚拟机内存区域唯一一个不会内存溢出的区域。</p><h4 id="二、Java虚拟机栈"><a href="#二、Java虚拟机栈" class="headerlink" title="二、Java虚拟机栈"></a>二、Java虚拟机栈</h4><p>​    Java虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链栈、方法出口等信息。Java虚拟机栈也是线程私有，生命周期和线程相同。</p><p>​    Java虚拟机栈中的局部变量表：存放编译期可知的各种基本数据类型、引用类型（reference）和runAddress类型。局部变量表所需要的内存空间在编译期间完成内存分配，在方法运行期间不会改变局部变量表的大小。</p><p>​    异常：</p><p>1）StackOverflowError：线程请求的栈的深度大于虚拟机所允许的深度。</p><p>2）OutOfMemoryError：扩展时无法申请到足够的内存。</p><h4 id="三、本地方法栈"><a href="#三、本地方法栈" class="headerlink" title="三、本地方法栈"></a>三、本地方法栈</h4><p>​    与Java虚拟机栈类似，线程私有，会抛出StackOverflowError和OutOfMemoryError异常。</p><p>​    Java虚拟机栈区别是本地方法栈为虚拟机使用的Native方法服务，Java虚拟机栈为虚拟机执行Java方法服务。</p><h4 id="四、Java堆"><a href="#四、Java堆" class="headerlink" title="四、Java堆"></a>四、Java堆</h4><p>​    存放对象实例，被所有线程共享，虚拟机启动时创建。Java堆又称GC堆，垃圾收集器管理的主要区域。</p><p>​    Java堆可以细分为：新生代和老年代。也可以分为Eden空间、From Survivor空间、To Survivor空间等。</p><p>如果在堆中没有内存完成实例分配，并且也无法再扩展，会抛出OutOfMemoryError异常</p><h4 id="五、方法区"><a href="#五、方法区" class="headerlink" title="五、方法区"></a>五、方法区</h4><p>​    用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。是线程共享的区域。</p><p>​    与java堆一样不需要连续的内存和可以选择的固定大小并且可以扩展。不同点是可以选择不实现垃圾收集，这个区域主要的内存回收目标是针对常量池的回收和对类型的卸载。</p><p>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常</p><h4 id="六、运行时常量池"><a href="#六、运行时常量池" class="headerlink" title="六、运行时常量池"></a>六、运行时常量池</h4><p>​    是方法区的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。具备动态特性，运行时也能将新的常量存放入池。同样在无法申请内存时会抛出OutOfMemoryError异常。</p><h4 id="七、直接内存"><a href="#七、直接内存" class="headerlink" title="七、直接内存"></a>七、直接内存</h4><p>​    不是虚拟机运行数据区的一部分。NIO类可以使用Native函数库直接分配堆外内存，然后通过存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，避免了在Java堆和Native堆中来回复制数据。也会抛OutOfMemoryErrory异常</p>]]></content>
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot使用@Async异步任务</title>
      <link href="/newblog/2018/07/17/spring-boot%E4%BD%BF%E7%94%A8@Async%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>/newblog/2018/07/17/spring-boot%E4%BD%BF%E7%94%A8@Async%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>github项目地址：<a href="https://github.com/lgsdaredevil/asyncTest">https://github.com/lgsdaredevil/asyncTest</a></p><h4 id="开启异步任务"><a href="#开启异步任务" class="headerlink" title="开启异步任务"></a>开启异步任务</h4><p>在应用主类中添加@EnableAsync注解<br><img src="https://raw.githubusercontent.com/lgsdaredevil/newblog/resource-newblog/source/favicons/article/QQ20180717111459.png" alt="在应用主类中添加注解"></p><h4 id="写异步任务方法"><a href="#写异步任务方法" class="headerlink" title="写异步任务方法"></a>写异步任务方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Future&lt;String&gt; <span class="hljs-title">ansync</span><span class="hljs-params">(String name)</span></span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           Thread.sleep(<span class="hljs-number">10000</span>);<br>           logger.info(<span class="hljs-string">"这里是异步方法"</span>);<br>           logger.info(<span class="hljs-string">"传过来的名字是："</span> + name);<br>           name = <span class="hljs-string">"修改的名字"</span>;<br>           logger.info(<span class="hljs-string">"修改后的名字是："</span> + name);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AsyncResult&lt;&gt;(<span class="hljs-string">"name: "</span> + name);<br>       &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AsyncResult&lt;&gt;(<span class="hljs-string">"异常"</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="调用异步方法"><a href="#调用异步方法" class="headerlink" title="调用异步方法"></a>调用异步方法</h4><ul><li>1、用Future获取返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">requestAnsync</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long start = System.currentTimeMillis();<br>            Future&lt;String&gt; result = ansync(name);<br>            <span class="hljs-keyword">if</span> (result.isDone())&#123;<br>                name = result.get();<br>                logger.info(<span class="hljs-string">"异步方法结束，名字改为："</span> + name);<br>            &#125;<br>            Long end = System.currentTimeMillis();<br>            logger.info(<span class="hljs-string">"耗时："</span> + (<span class="hljs-keyword">int</span>)(end-start));<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + name;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            logger.error(<span class="hljs-string">"异常"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"异常"</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><p>返回值，若想获取到返回值，应该轮询方法获取，否则若果没有isDone则不会走下面的方法，或者可以使用CompletableFuture：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">2018-07-17 11:31:55.390  INFO 5232 --- [nio-8080-exec-6] c.e.async.service.AsyncTestService       : 耗时：0<br>2018-07-17 11:32:05.394  INFO 5232 --- [cTaskExecutor-3] com.example.async.service.AsyncTest      : 这里是异步方法<br>2018-07-17 11:32:05.394  INFO 5232 --- [cTaskExecutor-3] com.example.async.service.AsyncTest      : 传过来的名字是：ling<br>2018-07-17 11:32:05.394  INFO 5232 --- [cTaskExecutor-3] com.example.async.service.AsyncTest      : 修改后的名字是：修改的名字<br></code></pre></td></tr></table></figure></p><p>如果使用future.get()方法会阻塞线程直到拿到结果。</p><ul><li>2、不使用future.get()方法，异步方法不使用Future返回<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">noReturnAsync</span><span class="hljs-params">(String name)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">10000</span>);<br>        logger.info(<span class="hljs-string">"这里是异步方法"</span>);<br>        logger.info(<span class="hljs-string">"传过来的名字是："</span> + name);<br>        name = <span class="hljs-string">"修改的名字"</span>;<br>        logger.info(<span class="hljs-string">"修改后的名字是："</span> + name);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>调用异步的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">noReturn</span><span class="hljs-params">(String name)</span></span>&#123;<br>        Long start = System.currentTimeMillis();<br>        asyncTest.noReturnAsync(name);<br>        Long end = System.currentTimeMillis();<br>        logger.info(<span class="hljs-string">"耗时："</span> + (<span class="hljs-keyword">int</span>)(end-start));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + name;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="注意的地方："><a href="#注意的地方：" class="headerlink" title="注意的地方："></a>注意的地方：</h4><p>如果异步方法变成阻塞的同步方法，可能原因是异步方法和普通的调用方法在同一个类中，解决方法是将异步方法单独放到一个类中。<br>产生原因：spring对@Transactional注解时也有类似问题，spring扫描时具有@Transactional注解方法的类时，是生成一个代理类，由代理类去开启关闭事务，而在同一个类中，方法调用是在类体内执行的，spring无法截获这个方法调用。<br>具体参见：<a href="https://www.cnblogs.com/shihaiming/p/7825204.html" target="_blank" rel="noopener">Spring Boot使用@Async实现异步调用</a></p>]]></content>
      
      <categories>
          
          <category> 技术文章项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> Async </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/newblog/2018/07/13/hello-world/"/>
      <url>/newblog/2018/07/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>部署hexo博客到github</title>
      <link href="/newblog/2018/07/11/%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E5%88%B0github/"/>
      <url>/newblog/2018/07/11/%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E5%88%B0github/</url>
      <content type="html"><![CDATA[<h1 id="部署hexo博客到github"><a href="#部署hexo博客到github" class="headerlink" title="部署hexo博客到github"></a>部署hexo博客到github</h1><h4 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/">GitHub</a></p><h4 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h4><p>在新目录下输入命令：<br><strong>npm install -g hexo-cli</strong></p><h4 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h4><p>博客目录下输入命令：<br><strong>hexo init</strong></p><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p><strong>npm install</strong></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改<em>_config.yml</em>文件<br>    url: <a href="http://github.com/">http://github.com/</a><br>    root: /newblog<br>    permalink: :year/:month/:day/:title/<br>    permalink_defaults:<br>root为文件目录的跟目录</p><pre><code>deploy: # 部署相关配置  type: git # 使用 Git 提交  repository: https://github.com/xxx/xxx.github.io.git # 博客仓库地址</code></pre><p><em>repository后地址为github的项目地址</em></p><h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><p><strong>hexo g 或者 hexo generate</strong></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><strong>hexo s 或 hexo server</strong><br>浏览器输入 <a href="http://localhost:4000/(root的目录)查看" target="_blank" rel="noopener">http://localhost:4000/(root的目录)查看</a></p><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p><strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</strong></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果发布时候报错： ERROR Deployer not found: Git<br>输入命令：<strong>npm install hexo-deployer-git –save</strong>，重新发布即可</p>]]></content>
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 部署博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/newblog/about/index.html"/>
      <url>/newblog/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/newblog/tags/index.html"/>
      <url>/newblog/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/newblog/categories/index.html"/>
      <url>/newblog/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
